/**
*  Domain class for Quote object.
*  Handles all functionality for its respective object,
*  deferring complex implementations to helper classes.
*/
public virtual class TriggerHandler {
	/**
	 *  @description Static domain method to handle trigger events
    */
    public static void triggerHandler() {
        if ( !trac_KillSwitch.blockExecution() && ignore == false) {
            if (!trac_KillSwitch.isDataLoaderUser()) {
            	try {
					if (trigger.isBefore) {
		            	if (trigger.isInsert) new trac_Quote(trigger.new).handleBeforeInsert();
		                if (trigger.isUpdate) new trac_Quote(trigger.new).handleBeforeUpdate(trigger.oldMap);
		            }
		            if (trigger.isAfter) {
		                if (trigger.isInsert) new trac_Quote(trigger.new).handleAfterInsert();
		                if (trigger.isUpdate) new trac_Quote(trigger.new).handleAfterUpdate(trigger.oldMap);
		            }
				} catch (DMLException dmlE) {
            		if(ExceptionHandler.isCrossObjectValidationError(dmlE))
            			ExceptionHandler.handleCrossObjectValidationError(dmlE, trigger.new);
            		else
            			throw dmlE;
            	}
            }
        }
    }