global class ExceptionHandler {
	
	/**
	 *	@description
	 *	Returns true if the exception is caused by a cusom validation rule
	 */
	public static Boolean isCrossObjectValidationError (Exception e) {
		if(e!=null && e instanceOf DmlException 
				&& StatusCode.FIELD_CUSTOM_VALIDATION_EXCEPTION == ((DmlException)e).getDmlType(0)) {
			return true;
		}
		return false;
		
	}
	
	/**
	 *	@description
	 * 	Replaces the error message caused by cross object validation rules.
	 *	When a validation rule is violated against a record
	 *		Instead of showing this error message:
	 *			"Error:Apex trigger trac_Quote caused an unexpected exception, contact your administrator: trac_Quote: execution of 
	 *			AfterUpdate caused by: System.DmlException: Update failed. First exception on row 0 with id 006c000000GpKocAAF; 
	 *			first error: FIELD_CUSTOM_VALIDATION_EXCEPTION, Record Has Been Locked For Integration: []: Class.trac_QuoteSyncOpp.execute: 
	 *			line 70, column 1"
	 *		It will show this error instead:
	 *			"Record Has Been Locked For Integration"
	 *
	 */
	public static void handleCrossObjectValidationError (DmlException dmlE, List<SObject> sObjs) {
		if(sObjs!=null) {
			for(SObject sObj : sObjs) {
				sObj.addError(dmlE.getDMLMessage(0) + ' (Id:'+dmlE.getDmlId(0)+')');
				
			}
		}
		
	}
	
    
}